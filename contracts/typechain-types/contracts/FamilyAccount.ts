/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FamilyAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveAndExecute"
      | "dailySpent"
      | "emergencyTransfer"
      | "getAvailableAllowance"
      | "getDelegateInfo"
      | "isMerchantWhitelisted"
      | "lastResetDay"
      | "owner"
      | "pendingRequests"
      | "rejectSpend"
      | "renounceOwnership"
      | "requestCounter"
      | "revokeDelegate"
      | "setDelegate"
      | "setMerchantWhitelist"
      | "spendAsDelegate"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DelegateRevoked"
      | "DelegateSet"
      | "MerchantWhitelisted"
      | "OwnershipTransferred"
      | "SpendExecuted"
      | "SpendRejected"
      | "SpendRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveAndExecute",
    values: [BytesLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailySpent",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyTransfer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAllowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegateInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMerchantWhitelisted",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastResetDay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectSpend",
    values: [BytesLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerchantWhitelist",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "spendAsDelegate",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveAndExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailySpent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMerchantWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastResetDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectSpend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerchantWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendAsDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DelegateRevokedEvent {
  export type InputTuple = [delegate: AddressLike];
  export type OutputTuple = [delegate: string];
  export interface OutputObject {
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateSetEvent {
  export type InputTuple = [
    delegate: AddressLike,
    requiresApproval: boolean,
    dailyLimit: BigNumberish,
    name: string
  ];
  export type OutputTuple = [
    delegate: string,
    requiresApproval: boolean,
    dailyLimit: bigint,
    name: string
  ];
  export interface OutputObject {
    delegate: string;
    requiresApproval: boolean;
    dailyLimit: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerchantWhitelistedEvent {
  export type InputTuple = [
    delegate: AddressLike,
    merchant: AddressLike,
    allowed: boolean
  ];
  export type OutputTuple = [
    delegate: string,
    merchant: string,
    allowed: boolean
  ];
  export interface OutputObject {
    delegate: string;
    merchant: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendExecutedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    actor: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: string,
    actor: string,
    token: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    requestId: string;
    actor: string;
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendRejectedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    delegate: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    requestId: string,
    delegate: string,
    reason: string
  ];
  export interface OutputObject {
    requestId: string;
    delegate: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendRequestedEvent {
  export type InputTuple = [
    requestId: BytesLike,
    delegate: AddressLike,
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    description: string
  ];
  export type OutputTuple = [
    requestId: string,
    delegate: string,
    token: string,
    to: string,
    amount: bigint,
    description: string
  ];
  export interface OutputObject {
    requestId: string;
    delegate: string;
    token: string;
    to: string;
    amount: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FamilyAccount extends BaseContract {
  connect(runner?: ContractRunner | null): FamilyAccount;
  waitForDeployment(): Promise<this>;

  interface: FamilyAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveAndExecute: TypedContractMethod<
    [
      requestId: BytesLike,
      delegate: AddressLike,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  dailySpent: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  emergencyTransfer: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailableAllowance: TypedContractMethod<
    [delegate: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getDelegateInfo: TypedContractMethod<
    [delegate: AddressLike],
    [
      [boolean, boolean, bigint, string] & {
        exists: boolean;
        requiresApproval: boolean;
        dailyLimit: bigint;
        name: string;
      }
    ],
    "view"
  >;

  isMerchantWhitelisted: TypedContractMethod<
    [delegate: AddressLike, merchant: AddressLike],
    [boolean],
    "view"
  >;

  lastResetDay: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingRequests: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  rejectSpend: TypedContractMethod<
    [requestId: BytesLike, delegate: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestCounter: TypedContractMethod<[], [bigint], "view">;

  revokeDelegate: TypedContractMethod<
    [delegate: AddressLike],
    [void],
    "nonpayable"
  >;

  setDelegate: TypedContractMethod<
    [
      delegate: AddressLike,
      requiresApproval: boolean,
      dailyLimit: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;

  setMerchantWhitelist: TypedContractMethod<
    [delegate: AddressLike, merchant: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;

  spendAsDelegate: TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveAndExecute"
  ): TypedContractMethod<
    [
      requestId: BytesLike,
      delegate: AddressLike,
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dailySpent"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyTransfer"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableAllowance"
  ): TypedContractMethod<
    [delegate: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegateInfo"
  ): TypedContractMethod<
    [delegate: AddressLike],
    [
      [boolean, boolean, bigint, string] & {
        exists: boolean;
        requiresApproval: boolean;
        dailyLimit: bigint;
        name: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMerchantWhitelisted"
  ): TypedContractMethod<
    [delegate: AddressLike, merchant: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lastResetDay"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingRequests"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "rejectSpend"
  ): TypedContractMethod<
    [requestId: BytesLike, delegate: AddressLike, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeDelegate"
  ): TypedContractMethod<[delegate: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<
    [
      delegate: AddressLike,
      requiresApproval: boolean,
      dailyLimit: BigNumberish,
      name: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMerchantWhitelist"
  ): TypedContractMethod<
    [delegate: AddressLike, merchant: AddressLike, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "spendAsDelegate"
  ): TypedContractMethod<
    [
      token: AddressLike,
      to: AddressLike,
      amount: BigNumberish,
      description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DelegateRevoked"
  ): TypedContractEvent<
    DelegateRevokedEvent.InputTuple,
    DelegateRevokedEvent.OutputTuple,
    DelegateRevokedEvent.OutputObject
  >;
  getEvent(
    key: "DelegateSet"
  ): TypedContractEvent<
    DelegateSetEvent.InputTuple,
    DelegateSetEvent.OutputTuple,
    DelegateSetEvent.OutputObject
  >;
  getEvent(
    key: "MerchantWhitelisted"
  ): TypedContractEvent<
    MerchantWhitelistedEvent.InputTuple,
    MerchantWhitelistedEvent.OutputTuple,
    MerchantWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SpendExecuted"
  ): TypedContractEvent<
    SpendExecutedEvent.InputTuple,
    SpendExecutedEvent.OutputTuple,
    SpendExecutedEvent.OutputObject
  >;
  getEvent(
    key: "SpendRejected"
  ): TypedContractEvent<
    SpendRejectedEvent.InputTuple,
    SpendRejectedEvent.OutputTuple,
    SpendRejectedEvent.OutputObject
  >;
  getEvent(
    key: "SpendRequested"
  ): TypedContractEvent<
    SpendRequestedEvent.InputTuple,
    SpendRequestedEvent.OutputTuple,
    SpendRequestedEvent.OutputObject
  >;

  filters: {
    "DelegateRevoked(address)": TypedContractEvent<
      DelegateRevokedEvent.InputTuple,
      DelegateRevokedEvent.OutputTuple,
      DelegateRevokedEvent.OutputObject
    >;
    DelegateRevoked: TypedContractEvent<
      DelegateRevokedEvent.InputTuple,
      DelegateRevokedEvent.OutputTuple,
      DelegateRevokedEvent.OutputObject
    >;

    "DelegateSet(address,bool,uint256,string)": TypedContractEvent<
      DelegateSetEvent.InputTuple,
      DelegateSetEvent.OutputTuple,
      DelegateSetEvent.OutputObject
    >;
    DelegateSet: TypedContractEvent<
      DelegateSetEvent.InputTuple,
      DelegateSetEvent.OutputTuple,
      DelegateSetEvent.OutputObject
    >;

    "MerchantWhitelisted(address,address,bool)": TypedContractEvent<
      MerchantWhitelistedEvent.InputTuple,
      MerchantWhitelistedEvent.OutputTuple,
      MerchantWhitelistedEvent.OutputObject
    >;
    MerchantWhitelisted: TypedContractEvent<
      MerchantWhitelistedEvent.InputTuple,
      MerchantWhitelistedEvent.OutputTuple,
      MerchantWhitelistedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SpendExecuted(bytes32,address,address,address,uint256)": TypedContractEvent<
      SpendExecutedEvent.InputTuple,
      SpendExecutedEvent.OutputTuple,
      SpendExecutedEvent.OutputObject
    >;
    SpendExecuted: TypedContractEvent<
      SpendExecutedEvent.InputTuple,
      SpendExecutedEvent.OutputTuple,
      SpendExecutedEvent.OutputObject
    >;

    "SpendRejected(bytes32,address,string)": TypedContractEvent<
      SpendRejectedEvent.InputTuple,
      SpendRejectedEvent.OutputTuple,
      SpendRejectedEvent.OutputObject
    >;
    SpendRejected: TypedContractEvent<
      SpendRejectedEvent.InputTuple,
      SpendRejectedEvent.OutputTuple,
      SpendRejectedEvent.OutputObject
    >;

    "SpendRequested(bytes32,address,address,address,uint256,string)": TypedContractEvent<
      SpendRequestedEvent.InputTuple,
      SpendRequestedEvent.OutputTuple,
      SpendRequestedEvent.OutputObject
    >;
    SpendRequested: TypedContractEvent<
      SpendRequestedEvent.InputTuple,
      SpendRequestedEvent.OutputTuple,
      SpendRequestedEvent.OutputObject
    >;
  };
}
